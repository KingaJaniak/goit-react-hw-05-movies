{"version":3,"file":"static/js/385.945aedf9.chunk.js","mappings":"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","sources":["components/MovieDetails.js","hooks/useMovie.js"],"sourcesContent":["import { useNavigate, useParams, Outlet, useLocation } from 'react-router-dom';\nimport useMovie from 'hooks/useMovie';\nimport { MovieDetailsBtn, DetailWrapper } from './App.styled';\n\n\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { filmData } = useMovie(`movie/${movieId}?`);\n\n  const handleClick = evt => {\n    navigate(evt.target.value);\n  };\n\n  const handleGoBack = () => {\n    navigate(location.state?.from ?? '/');\n  };\n\n  const { title, release_date, overview, genres, vote_average, poster_path } =\n    filmData;\n  return (\n    <DetailWrapper>\n      <img src={`https://image.tmdb.org/t/p/w400/${poster_path}`} alt=\"\" width=\"200\" height=\"300\"/>\n      <p></p>\n      <MovieDetailsBtn onClick={handleGoBack}>Go back</MovieDetailsBtn>\n      <h2>\n        {title} {release_date?.slice(0, 4)}\n      </h2>\n      <p>User score: {vote_average}</p>\n      <h3>Overview</h3>\n      <p>{overview}</p>\n      <h3>Genres</h3>\n      {genres?.map(gen => (\n        <span key={gen.id}>{gen.name} </span>\n      ))}\n      <p>Additional information</p>\n\n      <MovieDetailsBtn value=\"Cast\" onClick={handleClick}>\n        Cast\n      </MovieDetailsBtn>\n      <MovieDetailsBtn value=\"Reviews\" onClick={handleClick}>\n        Reviews\n      </MovieDetailsBtn>\n      <Outlet />\n    </DetailWrapper>\n  );\n};\n\nexport default MovieDetails;","import axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nconst apiKey = 'api_key=f50c0a327ad9f74a43c2e114bf8126ff';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst useMovie = query => {\n  const [filmData, setFilmData] = useState({}); \n  const [isLoading, setIsLoading] = useState(false); \n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const getFilms = async () => {\n      setIsLoading(true);\n      try {\n        const { data } = await axios.get(`${query}${apiKey}`);\n        setFilmData(data);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getFilms();\n  }, [query]);\n\n  return { filmData, isLoading, error };\n};\n\nexport default useMovie;\n"],"names":["movieId","useParams","navigate","useNavigate","location","useLocation","filmData","useMovie","concat","handleClick","evt","target","value","title","release_date","overview","genres","vote_average","poster_path","_jsxs","DetailWrapper","children","_jsx","src","alt","width","height","MovieDetailsBtn","onClick","_location$state$from","_location$state","state","from","slice","map","gen","name","id","Outlet","axios","query","_useState","useState","_useState2","_slicedToArray","setFilmData","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","getFilms","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","sent","t0","finish","stop","apply","arguments"],"sourceRoot":""}